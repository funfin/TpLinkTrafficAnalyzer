/*
 * NewJFrame.java
 *
 * Created on 23 październik 2008, 18:27
 */

package pl.pkarpik.pentagramcerberushacker.gui;

import java.awt.BorderLayout;
import java.io.PrintStream;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import pl.pkarpik.pentagramcerberushacker.engine.ByteTransfer;
import pl.pkarpik.pentagramcerberushacker.engine.ConnectionParametr;
import pl.pkarpik.pentagramcerberushacker.engine.MainStatus;



/**
 *
 * @author  Pio
 */
public class NewJFrame extends javax.swing.JFrame {
    
    private JPanel panelWykresZbiorowy=null;
    private XYSeries seriaIncoming;
    private XYSeries seriaOutgoing;
    private MainStatus ms;
    
    public static int X_COUNT=100;
    public static int DELTA_TIME=5;
    
    /** Creates new form NewJFrame */
    public NewJFrame(ConnectionParametr p) {
        initComponents();
        
        //addConsloe();
        
        


        ms= new MainStatus(p);
        
        startMainStatus();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Measure length");
        jPanel1.add(jLabel3);

        jSpinner2.setModel(new SpinnerNumberModel(X_COUNT, 20, 1000, 10));
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });
        jPanel1.add(jSpinner2);

        jLabel2.setText("Rehresh time:");
        jPanel1.add(jLabel2);

        jSpinner1.setModel(new SpinnerNumberModel(DELTA_TIME, 1, 10, 1));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jPanel1.add(jSpinner1);

        jButton1.setMnemonic('e');
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("TPLink Traffic Analyzer");
        jPanel2.add(jLabel1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-600)/2, 800, 600);
    }// </editor-fold>//GEN-END:initComponents

    
   private void startMainStatus(){
        panelWykresZbiorowy=new JPanel();
        panelWykresZbiorowy.setLayout(new BorderLayout());
        jTabbedPane1.add("All traffic", panelWykresZbiorowy);
        
        
        seriaIncoming = new XYSeries("Incoming");
        seriaOutgoing = new XYSeries("Outgoing");
        
        
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(seriaIncoming);
        dataset.addSeries(seriaOutgoing);

 
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Incoming and outgoing traffic history",
                null, //tytul pod wykresem
                "kB/s",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                false,
                false
                );
        
        XYPlot plot = (XYPlot) chart.getPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(0, false);
        renderer.setSeriesLinesVisible(1, true);
        renderer.setSeriesShapesVisible(1, false);
        renderer.setSeriesLinesVisible(2, true);
        renderer.setSeriesShapesVisible(2, false);
        renderer.setSeriesLinesVisible(3, true);
        renderer.setSeriesShapesVisible(3, false);
        plot.setRenderer(renderer);
//        if(Variables.metodaUsuwaniaNajlabszych==Variables.METODA_ELIMINACJI_PRZEZ_ODCIECIE){
//            plot.getRangeAxis(0).setLowerBound(lowerBound-delta);
//            plot.getRangeAxis(0).setUpperBound(upperBound+delta);
//        }
        ChartPanel chartPanel = new ChartPanel(chart);

        panelWykresZbiorowy.removeAll();
        panelWykresZbiorowy.add(chartPanel, java.awt.BorderLayout.CENTER);
        panelWykresZbiorowy.revalidate();



        for (int i = 0; i <= X_COUNT; i++) {
            seriaIncoming.addOrUpdate(i, 0);
            seriaOutgoing.addOrUpdate(i, 0);
        }
        Thread krok = new Thread(new Runnable() {

            public void run() {
                while (true) 
                {
                    ByteTransfer bt=ms.getByteTransferPerSecond(DELTA_TIME);
                    for (int i = 0; i <= X_COUNT-1; i++) {
                        seriaIncoming.addOrUpdate(i, seriaIncoming.getY(i + 1));
                        seriaOutgoing.addOrUpdate(i, seriaOutgoing.getY(i + 1));
                    }
                    seriaIncoming.addOrUpdate(X_COUNT, bt.getReciveBytes()/1024);
                    seriaOutgoing.addOrUpdate(X_COUNT, bt.getSendBytes()/1024);
                }
            }
        });
        krok.start();
   }
    
    
//   private void addConsloe(){
//        JTextArea txtConsole = new JTextArea();
//        txtConsole.setFont(new java.awt.Font("Arial", 0, 12));
//        JScrollPane jScrollPane=new JScrollPane();
//        jScrollPane.setViewportView(txtConsole);
//        jTabbedPane1.addTab("Konsola błędów", jScrollPane);
//        
//// Now create a new TextAreaOutputStream to write to our JTextArea control and wrap a
//// PrintStream around it to support the println/printf methods.
//        PrintStream out = new PrintStream( new TextAreaOutputStream( txtConsole ) );
//        
//// redirect standard output stream to the TextAreaOutputStream
//        System.setOut( out );
//        
//// redirect standard error stream to the TextAreaOutputStream
//        System.setErr( out );
//    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // TODO add your handling code here:
        DELTA_TIME=Integer.valueOf(jSpinner1.getValue().toString());
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        // TODO add your handling code here:
        int temp_x_count=X_COUNT;
        X_COUNT=Integer.valueOf(jSpinner2.getValue().toString());
        if(X_COUNT>temp_x_count){
//            for()
//            seriaIncoming.add(temp_x_count);
        }
    }//GEN-LAST:event_jSpinner2StateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        final ConnectionParametr p = new ConnectionParametr();
        p.setHttpAddres("http://192.168.1.100/userRpm/StatusRpm.htm");
        p.setUser("admin");
        p.setPassword("gwiazdka44");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame(p).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    
}
